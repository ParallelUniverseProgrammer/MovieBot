from __future__ import annotations

import discord
from discord import app_commands
from typing import Optional

from config.loader import load_settings


def register(client: discord.Client) -> None:
    tree = client.tree
    
    # Utilities group for helpful tools
    utils_group = app_commands.Group(name="utils", description="Utility commands and helpers")

    @utils_group.command(name="ping", description="Check if the bot is responsive")
    async def ping(interaction: discord.Interaction):
        await interaction.response.send_message("üèì Pong! Bot is online and responsive.", ephemeral=True)

    @utils_group.command(name="help", description="Show available commands and their usage")
    async def show_help(interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        help_text = """**üé¨ MovieBot Commands**

**üì∫ Media Management (`/media`)**
‚Ä¢ `/media search` - Search your Plex library
‚Ä¢ `/media rate` - Rate movies/shows (1-10)
‚Ä¢ `/media recent` - Show recently added content
‚Ä¢ `/media ondeck` - Show what's next to watch
‚Ä¢ `/media continue` - Show content to continue watching
‚Ä¢ `/media unwatched` - Show unwatched content

**üîç Discovery (`/discover`)**
‚Ä¢ `/discover search` - Search TMDb for new content
‚Ä¢ `/discover trending` - Show trending content
‚Ä¢ `/discover popular` - Show popular content
‚Ä¢ `/discover upcoming` - Show upcoming releases
‚Ä¢ `/discover nowplaying` - Show movies in theaters

**‚öôÔ∏è Management (`/manage`)**
‚Ä¢ `/manage addmovie` - Add movie to Radarr
‚Ä¢ `/manage addseries` - Add series to Sonarr
‚Ä¢ `/manage queue` - Show download queue
‚Ä¢ `/manage status` - Show system status
‚Ä¢ `/manage wanted` - Show missing content

**‚öôÔ∏è Preferences (`/prefs`)**
‚Ä¢ `/prefs show` - Show household preferences
‚Ä¢ `/prefs set` - Set preference values
‚Ä¢ `/prefs add` - Add to list preferences
‚Ä¢ `/prefs remove` - Remove from list preferences
‚Ä¢ `/prefs search` - Search preferences
‚Ä¢ `/prefs reset` - Reset all preferences

**üõ†Ô∏è Utilities (`/utils`)**
‚Ä¢ `/utils ping` - Check bot responsiveness
‚Ä¢ `/utils help` - Show this help message
‚Ä¢ `/utils info` - Show bot and system info

**üí¨ AI Chat**
‚Ä¢ Mention the bot or DM it to start a conversation
‚Ä¢ The bot can use all available tools to help you

**üí° Tips:**
‚Ä¢ Use `/discover search` to find TMDb IDs for adding content
‚Ä¢ Use `/media search` to find Plex rating keys for rating
‚Ä¢ Set up default quality profiles in config/config.yaml
‚Ä¢ Use `/prefs` to teach the bot about your household's taste

Need help with a specific command? Just ask!"""
        
        await interaction.followup.send(help_text[:1900], ephemeral=True)

    @utils_group.command(name="info", description="Show bot and system information")
    async def show_info(interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        try:
            settings = load_settings(client.project_root)
            
            info_lines = [
                "**ü§ñ Bot Information**",
                f"‚Ä¢ Project Root: {client.project_root}",
                "",
                "**üîë API Keys Status**",
                f"‚Ä¢ Discord Token: {'‚úÖ Configured' if settings.discord_token else '‚ùå Missing'}",
                f"‚Ä¢ Plex Token: {'‚úÖ Configured' if settings.plex_token else '‚ùå Missing'}",
                f"‚Ä¢ TMDb API Key: {'‚úÖ Configured' if settings.tmdb_api_key else '‚ùå Missing'}",
                f"‚Ä¢ Radarr API Key: {'‚úÖ Configured' if settings.radarr_api_key else '‚ùå Missing'}",
                f"‚Ä¢ Sonarr API Key: {'‚úÖ Configured' if settings.sonarr_api_key else '‚ùå Missing'}",
                "",
                "**üåê Service URLs**",
                f"‚Ä¢ Plex: {settings.plex_base_url or 'Not configured'}",
                f"‚Ä¢ Radarr: {settings.radarr_base_url or 'Not configured'}",
                f"‚Ä¢ Sonarr: {settings.sonarr_base_url or 'Not configured'}",
                "",
                "**üí° Next Steps**",
                "‚Ä¢ Configure missing API keys in your .env file",
                "‚Ä¢ Set up service URLs if not configured",
                "‚Ä¢ Use `/utils help` for command usage",
                "‚Ä¢ Mention the bot to start chatting!"
            ]
            
            info_text = "\n".join(info_lines)
            await interaction.followup.send(info_text[:1900], ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå Failed to get info: {str(e)}", ephemeral=True)

    @utils_group.command(name="status", description="Quick health check of all services")
    async def quick_status(interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        try:
            settings = load_settings(client.project_root)
            
            status_lines = ["**üîç Quick Status Check**"]
            
            # Check Plex
            if settings.plex_base_url and settings.plex_token:
                try:
                    from integrations.plex_client import PlexClient
                    plex = PlexClient(settings.plex_base_url, settings.plex_token)
                    # Try to get library sections as a health check
                    sections = plex.get_library_sections()
                    if sections:
                        status_lines.append("‚Ä¢ Plex: ‚úÖ Connected and responsive")
                    else:
                        status_lines.append("‚Ä¢ Plex: ‚ö†Ô∏è Connected but no libraries found")
                except Exception:
                    status_lines.append("‚Ä¢ Plex: ‚ùå Connection failed")
            else:
                status_lines.append("‚Ä¢ Plex: ‚ö†Ô∏è Not configured")
            
            # Check TMDb
            if settings.tmdb_api_key:
                try:
                    from integrations.tmdb_client import TMDbClient
                    tmdb = TMDbClient(settings.tmdb_api_key)
                    # Try a simple API call
                    await tmdb.popular_movies()
                    await tmdb.close()
                    status_lines.append("‚Ä¢ TMDb: ‚úÖ API working")
                except Exception:
                    status_lines.append("‚Ä¢ TMDb: ‚ùå API error")
            else:
                status_lines.append("‚Ä¢ TMDb: ‚ö†Ô∏è Not configured")
            
            # Check Radarr
            if settings.radarr_base_url and settings.radarr_api_key:
                try:
                    from integrations.radarr_client import RadarrClient
                    radarr = RadarrClient(settings.radarr_base_url, settings.radarr_api_key)
                    await radarr.system_status()
                    await radarr.close()
                    status_lines.append("‚Ä¢ Radarr: ‚úÖ Connected and responsive")
                except Exception:
                    status_lines.append("‚Ä¢ Radarr: ‚ùå Connection failed")
            else:
                status_lines.append("‚Ä¢ Radarr: ‚ö†Ô∏è Not configured")
            
            # Check Sonarr
            if settings.sonarr_base_url and settings.sonarr_api_key:
                try:
                    from integrations.sonarr_client import SonarrClient
                    sonarr = SonarrClient(settings.sonarr_base_url, settings.sonarr_api_key)
                    await sonarr.system_status()
                    await sonarr.close()
                    status_lines.append("‚Ä¢ Sonarr: ‚úÖ Connected and responsive")
                except Exception:
                    status_lines.append("‚Ä¢ Sonarr: ‚ùå Connection failed")
            else:
                status_lines.append("‚Ä¢ Sonarr: ‚ö†Ô∏è Not configured")
            
            status_lines.append("")
            status_lines.append("**üí° Note:** This is a basic connectivity check.")
            status_lines.append("Use `/manage status` for detailed system information.")
            
            status_text = "\n".join(status_lines)
            await interaction.followup.send(status_text[:1900], ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå Status check failed: {str(e)}", ephemeral=True)

    tree.add_command(utils_group)
